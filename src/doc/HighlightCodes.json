{
  "base": {
    "source": "<template>\n  <div class=\"demo\">\n    <a-button @click=\"selectedNode\">获取选中节点</a-button>\n    <vir-tree\n      ref=\"virTree\"\n      :source=\"list\"\n      :default-disabled-keys=\"defaultDisabledKeys\"\n      :default-selected-key=\"defaultSelectedKey\"\n      :default-expanded-keys=\"defaultExpandedKeys\"\n    />\n  </div>\n</template>\n\n<script lang=\"tsx\">\n  import {defineComponent, onMounted, ref} from 'vue';\n  import {TreeInstance, TreeNodeOptions} from \"vue-virtual-tree\";\n\n  function recursion(path = '0', level = 3): TreeNodeOptions[] {\n    const list = [];\n    for (let i = 0; i < 10; i += 1) {\n      const nodeKey = `${path}-${i}`;\n      const treeNode: TreeNodeOptions  = {\n        nodeKey,\n        name: nodeKey,\n        children: [],\n        hasChildren: true\n      };\n\n      if (level > 0) {\n        treeNode.children = recursion(nodeKey, level - 1);\n      } else {\n        treeNode.hasChildren = false;\n      }\n\n      list.push(treeNode);\n    }\n    return list;\n  }\n\n  export default defineComponent({\n    name: 'BaseDemo',\n    setup() {\n      const list = ref<TreeNodeOptions[]>([]);\n      const virTree = ref<TreeInstance | null>(null);\n      const defaultExpandedKeys = ref(['0-0', '0-1', '0-1-0']);\n      const defaultSelectedKey = ref('0-0-1-0');\n      const defaultDisabledKeys = ref(['0-0-1']);\n\n      onMounted(() => {\n        list.value = recursion();\n      });\n      const selectedNode = () => {\n\t\tconst node = virTree.value!.getSelectedNode();\n\t\tconsole.log('selected node', node);\n      }\n      return {\n        list,\n        virTree,\n        selectedNode,\n        defaultExpandedKeys,\n        defaultSelectedKey,\n        defaultDisabledKeys\n      }\n    }\n  });\n</script>\n",
    "highlight": "<link href=\"http://statics.1024tools.com/libs/highlight.js/styles/monokai_sublime.css\" rel=\"stylesheet\" />\n<pre class='hljs'><code>&lt;<span class=\"hljs-keyword\">template</span>&gt;\n  &lt;<span class=\"hljs-keyword\">div</span> class=<span class=\"hljs-string\">\"demo\"</span>&gt;\n    &lt;a-button @click=<span class=\"hljs-string\">\"selectedNode\"</span>&gt;获取选中节点&lt;/a-button&gt;\n    &lt;vir-tree\n      <span class=\"hljs-keyword\">ref</span>=<span class=\"hljs-string\">\"virTree\"</span>\n      :source=<span class=\"hljs-string\">\"list\"</span>\n      :default-disabled-keys=<span class=\"hljs-string\">\"defaultDisabledKeys\"</span>\n      :default-selected-key=<span class=\"hljs-string\">\"defaultSelectedKey\"</span>\n      :default-expanded-keys=<span class=\"hljs-string\">\"defaultExpandedKeys\"</span>\n    /&gt;\n  &lt;/<span class=\"hljs-keyword\">div</span>&gt;\n&lt;/<span class=\"hljs-keyword\">template</span>&gt;\n\n&lt;script lang=<span class=\"hljs-string\">\"tsx\"</span>&gt;\n  <span class=\"hljs-keyword\">import</span> {defineComponent, onMounted, <span class=\"hljs-keyword\">ref</span>} <span class=\"hljs-keyword\">from</span> 'vue';\n  <span class=\"hljs-keyword\">import</span> {<span class=\"hljs-type\">TreeInstance</span>, <span class=\"hljs-type\">TreeNodeOptions</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue-virtual-tree\"</span>;\n\n  function recursion(path = '<span class=\"hljs-number\">0</span>', level = <span class=\"hljs-number\">3</span>): <span class=\"hljs-type\">TreeNodeOptions</span>[] {\n    <span class=\"hljs-keyword\">const</span> list = [];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i += <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-keyword\">const</span> nodeKey = `${path}-${i}`;\n      <span class=\"hljs-keyword\">const</span> treeNode: <span class=\"hljs-type\">TreeNodeOptions</span>  = {\n        nodeKey,\n        name: nodeKey,\n        children: [],\n        hasChildren: <span class=\"hljs-literal\">true</span>\n      };\n\n      <span class=\"hljs-keyword\">if</span> (level &gt; <span class=\"hljs-number\">0</span>) {\n        treeNode.children = recursion(nodeKey, level - <span class=\"hljs-number\">1</span>);\n      } <span class=\"hljs-keyword\">else</span> {\n        treeNode.hasChildren = <span class=\"hljs-literal\">false</span>;\n      }\n\n      list.push(treeNode);\n    }\n    <span class=\"hljs-keyword\">return</span> list;\n  }\n\n  <span class=\"hljs-keyword\">export</span> default defineComponent({\n    name: '<span class=\"hljs-type\">BaseDemo</span>',\n    setup() {\n      <span class=\"hljs-keyword\">const</span> list = <span class=\"hljs-keyword\">ref</span>&lt;<span class=\"hljs-type\">TreeNodeOptions</span>[]&gt;([]);\n      <span class=\"hljs-keyword\">const</span> virTree = <span class=\"hljs-keyword\">ref</span>&lt;<span class=\"hljs-type\">TreeInstance</span> | null&gt;(null);\n      <span class=\"hljs-keyword\">const</span> defaultExpandedKeys = <span class=\"hljs-keyword\">ref</span>(['<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">0</span>', '<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">1</span>', '<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">0</span>']);\n      <span class=\"hljs-keyword\">const</span> defaultSelectedKey = <span class=\"hljs-keyword\">ref</span>('<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">0</span>');\n      <span class=\"hljs-keyword\">const</span> defaultDisabledKeys = <span class=\"hljs-keyword\">ref</span>(['<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">1</span>']);\n\n      onMounted(() =&gt; {\n        list.value = recursion();\n      });\n      <span class=\"hljs-keyword\">const</span> selectedNode = () =&gt; {\n\t\t<span class=\"hljs-keyword\">const</span> node = virTree.value!.getSelectedNode();\n\t\tconsole.log('selected node', node);\n      }\n      <span class=\"hljs-keyword\">return</span> {\n        list,\n        virTree,\n        selectedNode,\n        defaultExpandedKeys,\n        defaultSelectedKey,\n        defaultDisabledKeys\n      }\n    }\n  });\n&lt;/script&gt;\n</code></pre>"
  },
  "checkbox": {
    "source": "<template>\n  <div class=\"demo\">\n    <section>\n      <h5>默认父子节点联动</h5>\n      <a-button @click=\"halfNodes\">获取半选节点</a-button>\n      <vir-tree ref=\"virTreeOne\" show-checkbox :source=\"list\" :default-checked-keys=\"defaultCheckedKeys\" />\n    </section>\n    <section>\n      <h5>父子节点不联动</h5>\n      <a-button @click=\"checkedNodes\">获取勾选节点</a-button>\n      <vir-tree ref=\"virTreeTwo\" show-checkbox check-strictly :source=\"list\" :default-checked-keys=\"defaultCheckedKeys\" />\n    </section>\n  </div>\n</template>\n\n<script lang=\"tsx\">\n  import {defineComponent, onMounted, ref} from 'vue';\n  import {TreeInstance, TreeNodeOptions} from \"vue-virtual-tree\";\";\n\n  function recursion(path = '0', level = 3): TreeNodeOptions[] {\n    const list = [];\n    for (let i = 0; i < 10; i++) {\n      const nodeKey = `${path}-${i}`;\n      const treeNode: TreeNodeOptions = {\n        nodeKey,\n        name: nodeKey,\n        children: [],\n        hasChildren: true\n      };\n\n      if (level > 0) {\n        treeNode.children = recursion(nodeKey, level - 1);\n      } else {\n        treeNode.hasChildren = false;\n      }\n\n      list.push(treeNode);\n    }\n    return list;\n  }\n\n  export default defineComponent({\n    name: 'CheckboxDemo',\n    setup() {\n      const list = ref<TreeNodeOptions[]>([]);\n      const virTreeOne = ref<TreeInstance | null>(null);\n      const virTreeTwo = ref<TreeInstance | null>(null);\n      const defaultCheckedKeys = ref(['0-0-0', '0-2']);\n\n\n      onMounted(() => {\n        list.value = recursion();\n      });\n      const halfNodes = () => {\n\t\tconst node = virTree.value!.getHalfCheckedNodes();\n\t\tconsole.log('halfNodes', node);\n      }\n      const checkedNodes = () => {\n\t\tconst node = virTree.value!.getCheckedNodes();\n\t\tconsole.log('checkedNodes node', node);\n      }\n      return {\n        list,\n        virTreeOne,\n        virTreeTwo,\n        halfNodes,\n        checkedNodes,\n        defaultCheckedKeys\n      }\n    }\n  });\n</script>\n<style scoped lang=\"scss\">\n  .demo {\n    display: flex;\n    justify-content: space-between;\n    section {\n      width: 45%;\n    }\n  }\n</style>\n",
    "highlight": "<link href=\"http://statics.1024tools.com/libs/highlight.js/styles/monokai_sublime.css\" rel=\"stylesheet\" />\n<pre class='hljs'><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"demo\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">section</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">h5</span>&gt;</span>默认父子节点联动<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">h5</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a-button</span> @<span class=\"hljs-attribute\">click</span>=<span class=\"hljs-value\">\"halfNodes\"</span>&gt;</span>获取半选节点<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a-button</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">vir-tree</span> <span class=\"hljs-attribute\">ref</span>=<span class=\"hljs-value\">\"virTreeOne\"</span> <span class=\"hljs-attribute\">show-checkbox</span> <span class=\"hljs-attribute\">:source</span>=<span class=\"hljs-value\">\"list\"</span> <span class=\"hljs-attribute\">:default-checked-keys</span>=<span class=\"hljs-value\">\"defaultCheckedKeys\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">section</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">section</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">h5</span>&gt;</span>父子节点不联动<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">h5</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a-button</span> @<span class=\"hljs-attribute\">click</span>=<span class=\"hljs-value\">\"checkedNodes\"</span>&gt;</span>获取勾选节点<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a-button</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">vir-tree</span> <span class=\"hljs-attribute\">ref</span>=<span class=\"hljs-value\">\"virTreeTwo\"</span> <span class=\"hljs-attribute\">show-checkbox</span> <span class=\"hljs-attribute\">check-strictly</span> <span class=\"hljs-attribute\">:source</span>=<span class=\"hljs-value\">\"list\"</span> <span class=\"hljs-attribute\">:default-checked-keys</span>=<span class=\"hljs-value\">\"defaultCheckedKeys\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">section</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">script</span> <span class=\"hljs-attribute\">lang</span>=<span class=\"hljs-value\">\"tsx\"</span>&gt;</span><span class=\"javascript\">\n  import {defineComponent, onMounted, ref} from <span class=\"hljs-string\">'vue'</span>;\n  import {TreeInstance, TreeNodeOptions} from <span class=\"hljs-string\">\"vue-virtual-tree\"</span>;<span class=\"hljs-string\">\";\n\n  function recursion(path = '0', level = 3): TreeNodeOptions[] {\n    const list = [];\n    for (let i = 0; i &lt; 10; i++) {\n      const nodeKey = `${path}-${i}`;\n      const treeNode: TreeNodeOptions = {\n        nodeKey,\n        name: nodeKey,\n        children: [],\n        hasChildren: true\n      };\n\n      if (level &gt; 0) {\n        treeNode.children = recursion(nodeKey, level - 1);\n      } else {\n        treeNode.hasChildren = false;\n      }\n\n      list.push(treeNode);\n    }\n    return list;\n  }\n\n  export default defineComponent({\n    name: 'CheckboxDemo',\n    setup() {\n      const list = ref&lt;TreeNodeOptions[]&gt;([]);\n      const virTreeOne = ref&lt;TreeInstance | null&gt;(null);\n      const virTreeTwo = ref&lt;TreeInstance | null&gt;(null);\n      const defaultCheckedKeys = ref(['0-0-0', '0-2']);\n\n\n      onMounted(() =&gt; {\n        list.value = recursion();\n      });\n      const halfNodes = () =&gt; {\n\t\tconst node = virTree.value!.getHalfCheckedNodes();\n\t\tconsole.log('halfNodes', node);\n      }\n      const checkedNodes = () =&gt; {\n\t\tconst node = virTree.value!.getCheckedNodes();\n\t\tconsole.log('checkedNodes node', node);\n      }\n      return {\n        list,\n        virTreeOne,\n        virTreeTwo,\n        halfNodes,\n        checkedNodes,\n        defaultCheckedKeys\n      }\n    }\n  });\n</span></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">style</span> <span class=\"hljs-attribute\">scoped</span> <span class=\"hljs-attribute\">lang</span>=<span class=\"hljs-value\">\"scss\"</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-class\">.demo</span> <span class=\"hljs-rules\">{\n    <span class=\"hljs-rule\"><span class=\"hljs-attribute\">display</span>:<span class=\"hljs-value\"> flex</span></span>;\n    <span class=\"hljs-rule\"><span class=\"hljs-attribute\">justify-content</span>:<span class=\"hljs-value\"> space-between</span></span>;\n    <span class=\"hljs-rule\"><span class=\"hljs-attribute\">section {\n      width</span>:<span class=\"hljs-value\"> <span class=\"hljs-number\">45%</span></span></span>;\n    <span class=\"hljs-rule\">}</span></span>\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">style</span>&gt;</span>\n</code></pre>"
  },
  "asyncData": {
    "source": "<template>\n  <div class=\"demo\">\n    <button @click=\"checkedNodes\">获取勾选节点</button>\n    <vir-tree ref=\"virTree\" :source=\"list\" show-checkbox :loadData=\"loadData\" />\n  </div>\n</template>\n\n<script lang=\"tsx\">\n  import {defineComponent, onMounted, ref} from 'vue';\n  \n  import {VirTree,TreeInstance, TreeNodeOptions} from \"vue-virtual-tree\";\n\n  function recursion(path = '0'): TreeNodeOptions[] {\n    const list = [];\n    for (let i = 0; i < 2; i += 1) {\n      const nodeKey = `${path}-${i}`;\n      const treeNode: TreeNodeOptions  = {\n        nodeKey,\n        name: nodeKey,\n        children: [],\n        hasChildren: true\n      };\n      list.push(treeNode);\n    }\n    return list;\n  }\n\n  export default defineComponent({\n    name: 'AsyncDataDemo',\n    components: { VirTree },\n    setup(prop, {emit}) {\n      const list = ref<TreeNodeOptions[]>([]);\n      const virTree = ref<TreeInstance | null>(null);\n      onMounted(() => {\n        list.value = recursion();\n      });\n      const loadData = (node: TreeNodeOptions, callback: (children: TreeNodeOptions[]) => void) => {\n        console.log('loadData', node);\n        const result: TreeNodeOptions[] = [];\n        for (let i = 0; i < 2; i += 1) {\n          const nodeKey = `${node.nodeKey}-${i}`;\n          const treeNode: TreeNodeOptions  = {\n            nodeKey,\n            name: nodeKey,\n            children: [],\n            hasChildren: true\n          };\n          result.push(treeNode);\n        }\n        setTimeout(() => {\n          callback(result);\n        }, 500);\n      }\n      const checkedNodes = () => {\n        const checks = virTree.value!.getCheckedNodes();\n        console.log('checks', checks);\n      }\n      return {\n        list,\n        virTree,\n        loadData,\n        checkedNodes\n      }\n    }\n  });\n</script>\n",
    "highlight": "<pre class='hljs'><code>&lt;<span class=\"hljs-keyword\">template</span>&gt;\n  &lt;<span class=\"hljs-keyword\">div</span> class=<span class=\"hljs-string\">\"demo\"</span>&gt;\n    &lt;button @click=<span class=\"hljs-string\">\"checkedNodes\"</span>&gt;获取勾选节点&lt;/button&gt;\n    &lt;vir-tree <span class=\"hljs-keyword\">ref</span>=<span class=\"hljs-string\">\"virTree\"</span> :source=<span class=\"hljs-string\">\"list\"</span> show-checkbox :loadData=<span class=\"hljs-string\">\"loadData\"</span> /&gt;\n  &lt;/<span class=\"hljs-keyword\">div</span>&gt;\n&lt;/<span class=\"hljs-keyword\">template</span>&gt;\n\n&lt;script lang=<span class=\"hljs-string\">\"tsx\"</span>&gt;\n  <span class=\"hljs-keyword\">import</span> {defineComponent, onMounted, <span class=\"hljs-keyword\">ref</span>} <span class=\"hljs-keyword\">from</span> 'vue';\n  <span class=\"hljs-keyword\">import</span> { <span class=\"hljs-type\">VirTree</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue-virtual-tree\"</span>;\n  <span class=\"hljs-keyword\">import</span> {<span class=\"hljs-type\">TreeInstance</span>, <span class=\"hljs-type\">TreeNodeOptions</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue-virtual-tree\"</span>;\n\n  function recursion(path = '<span class=\"hljs-number\">0</span>'): <span class=\"hljs-type\">TreeNodeOptions</span>[] {\n    <span class=\"hljs-keyword\">const</span> list = [];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">2</span>; i += <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-keyword\">const</span> nodeKey = `${path}-${i}`;\n      <span class=\"hljs-keyword\">const</span> treeNode: <span class=\"hljs-type\">TreeNodeOptions</span>  = {\n        nodeKey,\n        name: nodeKey,\n        children: [],\n        hasChildren: <span class=\"hljs-literal\">true</span>\n      };\n      list.push(treeNode);\n    }\n    <span class=\"hljs-keyword\">return</span> list;\n  }\n\n  <span class=\"hljs-keyword\">export</span> default defineComponent({\n    name: '<span class=\"hljs-type\">AsyncDataDemo</span>',\n    components: { <span class=\"hljs-type\">VirTree</span> },\n    setup(prop, {emit}) {\n      <span class=\"hljs-keyword\">const</span> list = <span class=\"hljs-keyword\">ref</span>&lt;<span class=\"hljs-type\">TreeNodeOptions</span>[]&gt;([]);\n      <span class=\"hljs-keyword\">const</span> virTree = <span class=\"hljs-keyword\">ref</span>&lt;<span class=\"hljs-type\">TreeInstance</span> | null&gt;(null);\n      onMounted(() =&gt; {\n        list.value = recursion();\n      });\n      <span class=\"hljs-keyword\">const</span> loadData = (node: <span class=\"hljs-type\">TreeNodeOptions</span>, callback: (children: <span class=\"hljs-type\">TreeNodeOptions</span>[]) =&gt; <span class=\"hljs-type\">void</span>) =&gt; {\n        console.log('loadData', node);\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-literal\">result</span>: <span class=\"hljs-type\">TreeNodeOptions</span>[] = [];\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">2</span>; i += <span class=\"hljs-number\">1</span>) {\n          <span class=\"hljs-keyword\">const</span> nodeKey = `${node.nodeKey}-${i}`;\n          <span class=\"hljs-keyword\">const</span> treeNode: <span class=\"hljs-type\">TreeNodeOptions</span>  = {\n            nodeKey,\n            name: nodeKey,\n            children: [],\n            hasChildren: <span class=\"hljs-literal\">true</span>\n          };\n          <span class=\"hljs-literal\">result</span>.push(treeNode);\n        }\n        setTimeout(() =&gt; {\n          callback(<span class=\"hljs-literal\">result</span>);\n        }, <span class=\"hljs-number\">500</span>);\n      }\n      <span class=\"hljs-keyword\">const</span> checkedNodes = () =&gt; {\n        <span class=\"hljs-keyword\">const</span> checks = virTree.value!.getCheckedNodes();\n        console.log('checks', checks);\n      }\n      <span class=\"hljs-keyword\">return</span> {\n        list,\n        virTree,\n        loadData,\n        checkedNodes\n      }\n    }\n  });\n&lt;/script&gt;\n</code></pre>"
  },
  "customNode": {
    "source": "<template>\n  <div class=\"demo\">\n    <vir-tree :source=\"list\" show-checkbox :render=\"renderNode\" />\n  </div>\n</template>\n\n<script lang=\"tsx\">\n  import {defineComponent, onMounted, ref} from 'vue';\n  \n  import {VirTree,TreeInstance, TreeNodeOptions} from \"vue-virtual-tree\";\n\n  function recursion(path = '0', level = 3): TreeNodeOptions[] {\n    const list = [];\n    for (let i = 0; i < 10; i++) {\n      const nodeKey = `${path}-${i}`;\n      const treeNode: TreeNodeOptions = {\n        nodeKey,\n        name: nodeKey,\n        children: [],\n        hasChildren: true\n      };\n\n      if (level > 0) {\n        treeNode.children = recursion(nodeKey, level - 1);\n      } else {\n        treeNode.hasChildren = false;\n      }\n\n      list.push(treeNode);\n    }\n    return list;\n  }\n\n  export default defineComponent({\n    name: 'CustomNodeDemo',\n    setup(prop, {emit}) {\n      const list = ref<TreeNodeOptions[]>([]);\n      onMounted(() => {\n        list.value = recursion();\n      });\n      const renderNode = (node: TreeNodeOptions) => {\n        return <div style=\"padding: 0 4px;\"><b style=\"color: #f60;\">{ node.name }</b></div>\n      }\n      return {\n        list,\n        renderNode\n      }\n    }\n  });\n</script>\n",
    "highlight": "<pre class='hljs'><code>&lt;<span class=\"hljs-keyword\">template</span>&gt;\n  &lt;<span class=\"hljs-keyword\">div</span> class=<span class=\"hljs-string\">\"demo\"</span>&gt;\n    &lt;vir-tree :source=<span class=\"hljs-string\">\"list\"</span> show-checkbox :render=<span class=\"hljs-string\">\"renderNode\"</span> /&gt;\n  &lt;/<span class=\"hljs-keyword\">div</span>&gt;\n&lt;/<span class=\"hljs-keyword\">template</span>&gt;\n\n&lt;script lang=<span class=\"hljs-string\">\"tsx\"</span>&gt;\n  <span class=\"hljs-keyword\">import</span> {defineComponent, onMounted, <span class=\"hljs-keyword\">ref</span>} <span class=\"hljs-keyword\">from</span> 'vue';\n  <span class=\"hljs-keyword\">import</span> { <span class=\"hljs-type\">VirTree</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue-virtual-tree\"</span>;\n  <span class=\"hljs-keyword\">import</span> {<span class=\"hljs-type\">TreeInstance</span>, <span class=\"hljs-type\">TreeNodeOptions</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue-virtual-tree\"</span>;\n\n  function recursion(path = '<span class=\"hljs-number\">0</span>', level = <span class=\"hljs-number\">3</span>): <span class=\"hljs-type\">TreeNodeOptions</span>[] {\n    <span class=\"hljs-keyword\">const</span> list = [];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) {\n      <span class=\"hljs-keyword\">const</span> nodeKey = `${path}-${i}`;\n      <span class=\"hljs-keyword\">const</span> treeNode: <span class=\"hljs-type\">TreeNodeOptions</span> = {\n        nodeKey,\n        name: nodeKey,\n        children: [],\n        hasChildren: <span class=\"hljs-literal\">true</span>\n      };\n\n      <span class=\"hljs-keyword\">if</span> (level &gt; <span class=\"hljs-number\">0</span>) {\n        treeNode.children = recursion(nodeKey, level - <span class=\"hljs-number\">1</span>);\n      } <span class=\"hljs-keyword\">else</span> {\n        treeNode.hasChildren = <span class=\"hljs-literal\">false</span>;\n      }\n\n      list.push(treeNode);\n    }\n    <span class=\"hljs-keyword\">return</span> list;\n  }\n\n  <span class=\"hljs-keyword\">export</span> default defineComponent({\n    name: '<span class=\"hljs-type\">CustomNodeDemo</span>',\n    setup(prop, {emit}) {\n      <span class=\"hljs-keyword\">const</span> list = <span class=\"hljs-keyword\">ref</span>&lt;<span class=\"hljs-type\">TreeNodeOptions</span>[]&gt;([]);\n      onMounted(() =&gt; {\n        list.value = recursion();\n      });\n      <span class=\"hljs-keyword\">const</span> renderNode = (node: <span class=\"hljs-type\">TreeNodeOptions</span>) =&gt; {\n        <span class=\"hljs-keyword\">return</span> &lt;<span class=\"hljs-keyword\">div</span> style=<span class=\"hljs-string\">\"padding: 0 4px;\"</span>&gt;&lt;b style=<span class=\"hljs-string\">\"color: #f60;\"</span>&gt;{ node.name }&lt;/b&gt;&lt;/<span class=\"hljs-keyword\">div</span>&gt;\n      }\n      <span class=\"hljs-keyword\">return</span> {\n        list,\n        renderNode\n      }\n    }\n  });\n&lt;/script&gt;"
  },
  "customIcon": {
    "source": "<template>\n  <div class=\"demo\">\n    <vir-tree :source=\"list\" show-checkbox :loadData=\"loadData\">\n      <template #icon=\"loading\">\n        <i v-if=\"loading\" class=\"iconfont iconcustom-icon ico-loading\"></i>\n        <i v-else class=\"iconfont iconzhankai\"></i>\n      </template>\n    </vir-tree>\n  </div>\n</template>\n\n<script lang=\"tsx\">\nimport {defineComponent, onMounted, ref} from 'vue';\n\nimport { TreeNodeOptions } from \"vue-virtual-tree\";\n\nfunction recursion(path = '0'): TreeNodeOptions[] {\n  const list = [];\n  for (let i = 0; i < 2; i += 1) {\n    const nodeKey = `${path}-${i}`;\n    const treeNode: TreeNodeOptions  = {\n      nodeKey,\n      name: nodeKey,\n      children: [],\n      hasChildren: true\n    };\n    list.push(treeNode);\n  }\n  return list;\n}\n\nexport default defineComponent({\n  name: 'CustomIcon',\n  setup(prop, {emit}) {\n    const list = ref<TreeNodeOptions[]>([]);\n    onMounted(() => {\n      list.value = recursion();\n    });\n    const loadData = (node: TreeNodeOptions, callback: (children: TreeNodeOptions[]) => void) => {\n      console.log('loadData', node);\n      const result: TreeNodeOptions[] = [];\n      for (let i = 0; i < 2; i += 1) {\n        const nodeKey = `${node.nodeKey}-${i}`;\n        const treeNode: TreeNodeOptions  = {\n          nodeKey,\n          name: nodeKey,\n          children: [],\n          hasChildren: true\n        };\n        result.push(treeNode);\n      }\n      setTimeout(() => {\n        callback(result);\n      }, 500);\n    }\n    return {\n      list,\n      loadData\n    }\n  }\n});\n</script>\n",
    "highlight": "<pre class='hljs'><code>&lt;<span class=\"hljs-keyword\">template</span>&gt;\n  &lt;<span class=\"hljs-keyword\">div</span> class=<span class=\"hljs-string\">\"demo\"</span>&gt;\n    &lt;vir-tree :source=<span class=\"hljs-string\">\"list\"</span> show-checkbox :loadData=<span class=\"hljs-string\">\"loadData\"</span>&gt;\n      &lt;<span class=\"hljs-keyword\">template</span> <span class=\"hljs-comment\">#icon=\"loading\"&gt;</span>\n        &lt;i v-<span class=\"hljs-keyword\">if</span>=<span class=\"hljs-string\">\"loading\"</span> class=<span class=\"hljs-string\">\"iconfont iconcustom-icon ico-loading\"</span>&gt;&lt;/i&gt;\n        &lt;i v-<span class=\"hljs-keyword\">else</span> class=<span class=\"hljs-string\">\"iconfont iconzhankai\"</span>&gt;&lt;/i&gt;\n      &lt;/<span class=\"hljs-keyword\">template</span>&gt;\n    &lt;/vir-tree&gt;\n  &lt;/<span class=\"hljs-keyword\">div</span>&gt;\n&lt;/<span class=\"hljs-keyword\">template</span>&gt;\n\n&lt;script lang=<span class=\"hljs-string\">\"tsx\"</span>&gt;\n<span class=\"hljs-keyword\">import</span> {defineComponent, onMounted, <span class=\"hljs-keyword\">ref</span>} <span class=\"hljs-keyword\">from</span> 'vue';\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-type\">VirTree</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue-virtual-tree\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-type\">TreeNodeOptions</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue-virtual-tree\"</span>;\n\nfunction recursion(path = '<span class=\"hljs-number\">0</span>'): <span class=\"hljs-type\">TreeNodeOptions</span>[] {\n  <span class=\"hljs-keyword\">const</span> list = [];\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">2</span>; i += <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-keyword\">const</span> nodeKey = `${path}-${i}`;\n    <span class=\"hljs-keyword\">const</span> treeNode: <span class=\"hljs-type\">TreeNodeOptions</span>  = {\n      nodeKey,\n      name: nodeKey,\n      children: [],\n      hasChildren: <span class=\"hljs-literal\">true</span>\n    };\n    list.push(treeNode);\n  }\n  <span class=\"hljs-keyword\">return</span> list;\n}\n\n<span class=\"hljs-keyword\">export</span> default defineComponent({\n  name: '<span class=\"hljs-type\">CustomIcon</span>',\n  setup(prop, {emit}) {\n    <span class=\"hljs-keyword\">const</span> list = <span class=\"hljs-keyword\">ref</span>&lt;<span class=\"hljs-type\">TreeNodeOptions</span>[]&gt;([]);\n    onMounted(() =&gt; {\n      list.value = recursion();\n    });\n    <span class=\"hljs-keyword\">const</span> loadData = (node: <span class=\"hljs-type\">TreeNodeOptions</span>, callback: (children: <span class=\"hljs-type\">TreeNodeOptions</span>[]) =&gt; <span class=\"hljs-type\">void</span>) =&gt; {\n      console.log('loadData', node);\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-literal\">result</span>: <span class=\"hljs-type\">TreeNodeOptions</span>[] = [];\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">2</span>; i += <span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-keyword\">const</span> nodeKey = `${node.nodeKey}-${i}`;\n        <span class=\"hljs-keyword\">const</span> treeNode: <span class=\"hljs-type\">TreeNodeOptions</span>  = {\n          nodeKey,\n          name: nodeKey,\n          children: [],\n          hasChildren: <span class=\"hljs-literal\">true</span>\n        };\n        <span class=\"hljs-literal\">result</span>.push(treeNode);\n      }\n      setTimeout(() =&gt; {\n        callback(<span class=\"hljs-literal\">result</span>);\n      }, <span class=\"hljs-number\">500</span>);\n    }\n    <span class=\"hljs-keyword\">return</span> {\n      list,\n      loadData\n    }\n  }\n});\n&lt;/script&gt;\n</code></pre>"
  },
  "searchNode": {
    "source": "<template>\n  <div class=\"demo\">\n    <a-input placeholder=\"回车搜索\" @pressEnter=\"search\" />\n    <section>\n      <vir-tree show-checkbox :source=\"list\" :render=\"renderNode\" :default-expanded-keys=\"expandKeys\" />\n    </section>\n  </div>\n</template>\n\n<script lang=\"tsx\">\n  import {defineComponent, onMounted, ref} from 'vue';\n  import {TreeNodeOptions, NodeKey} from \"vue-virtual-tree\";\n\n  interface TreeNodeOptionsWithParentPath extends TreeNodeOptions {\n    parentPath: NodeKey;\n  }\n\n  const UNIQUE_WRAPPERS = ['##==-open_tag-==##', '##==-close_tag-==##'];\n  function getParentPath (parent: TreeNodeOptionsWithParentPath | null): Array<string | number> {\n    let result: Array<string | number> = [];\n    if (parent) {\n      const base = parent.parentPath || [];\n      result = base.concat(parent.nodeKey);\n    }\n    return result;\n  }\n  function recursion(path = '0', level = 3, parent: TreeNodeOptionsWithParentPath | null = null): TreeNodeOptionsWithParentPath[] {\n    const list = [];\n    for (let i = 0; i < 10; i++) {\n      const nodeKey = `${path}-${i}`;\n      const treeNode: TreeNodeOptionsWithParentPath = {\n        nodeKey,\n        name: nodeKey,\n        children: [],\n        hasChildren: true,\n        parentPath: getParentPath(parent)\n      };\n\n      if (level > 0) {\n        treeNode.children = recursion(nodeKey, level - 1, treeNode);\n      } else {\n        treeNode.hasChildren = false;\n      }\n\n      list.push(treeNode);\n    }\n    return list;\n  }\n\n  export default defineComponent({\n    name: 'SearchNodeDemo',\n    setup() {\n      const keywords = ref('');\n      const list = ref<TreeNodeOptionsWithParentPath[]>([]);\n      const expandKeys = ref<NodeKey[]>([]);\n      onMounted(() => {\n        list.value = recursion();\n        // console.log('list', list.value);\n      });\n      const formatSearchValue = (value: string) => {\n        return new RegExp(value.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$&'), 'i');\n      }\n      const findMatchedNodes = (keywords: string): TreeNodeOptionsWithParentPath[] => {\n        const result: TreeNodeOptionsWithParentPath[] = [];\n        const recursion = (list: TreeNodeOptionsWithParentPath[], parent: TreeNodeOptionsWithParentPath | null = null) => {\n          for (const item of list) {\n            const matched = formatSearchValue(keywords).test(item.name);\n            if (matched) {\n              result.push(item);\n            }\n            if (parent) {\n              // parent.expanded = matched;\n            }\n            if (item.children?.length) {\n              recursion(item.children as TreeNodeOptionsWithParentPath[], item);\n            }\n          }\n        }\n        if (keywords) {\n          recursion(list.value);\n        }\n        return result;\n      }\n      const search = (event: KeyboardEvent) => {\n        keywords.value = (event.target as HTMLInputElement).value;\n        const matchedNodes = findMatchedNodes(keywords.value);\n        if (matchedNodes.length) {\n          // 取出parentPath > 拍扁 > 去重\n          expandKeys.value = [...new Set(matchedNodes.map(item => item.parentPath).flat())];\n        }\n      }\n\n      const transform = (value: string, matchValue: string) => {\n        if (matchValue) {\n          const wrapValue = value.replace(formatSearchValue(matchValue), `${UNIQUE_WRAPPERS[0]}$&${UNIQUE_WRAPPERS[1]}`);\n          return wrapValue\n            .replace(new RegExp(UNIQUE_WRAPPERS[0], 'g'), '<span style=\"color: #ff2041;\">')\n            .replace(new RegExp(UNIQUE_WRAPPERS[1], 'g'), '</span>');\n        }\n        return value;\n      }\n      const renderNode = (node: TreeNodeOptions) => {\n        const content = transform(node.name, keywords.value);\n        return <div style=\"padding: 0 4px;\" innerHTML={ content } />;\n      }\n      return {\n        list,\n        search,\n        renderNode,\n        expandKeys\n      }\n    }\n  });\n</script>\n",
    "highlight": "<link href=\"http://statics.1024tools.com/libs/highlight.js/styles/monokai_sublime.css\" rel=\"stylesheet\" />\n<pre class='hljs'><code>&lt;<span class=\"hljs-keyword\">template</span>&gt;\n  &lt;<span class=\"hljs-keyword\">div</span> class=<span class=\"hljs-string\">\"demo\"</span>&gt;\n    &lt;a-input placeholder=<span class=\"hljs-string\">\"回车搜索\"</span> @pressEnter=<span class=\"hljs-string\">\"search\"</span> /&gt;\n    &lt;section&gt;\n      &lt;vir-tree show-checkbox :source=<span class=\"hljs-string\">\"list\"</span> :render=<span class=\"hljs-string\">\"renderNode\"</span> :default-expanded-keys=<span class=\"hljs-string\">\"expandKeys\"</span> /&gt;\n    &lt;/section&gt;\n  &lt;/<span class=\"hljs-keyword\">div</span>&gt;\n&lt;/<span class=\"hljs-keyword\">template</span>&gt;\n\n&lt;script lang=<span class=\"hljs-string\">\"tsx\"</span>&gt;\n  <span class=\"hljs-keyword\">import</span> {defineComponent, onMounted, <span class=\"hljs-keyword\">ref</span>} <span class=\"hljs-keyword\">from</span> 'vue';\n  <span class=\"hljs-keyword\">import</span> {<span class=\"hljs-type\">TreeNodeOptions</span>, <span class=\"hljs-type\">NodeKey</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue-virtual-tree\"</span>;\n\n  <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-type\">TreeNodeOptionsWithParentPath</span> extends <span class=\"hljs-type\">TreeNodeOptions</span> {\n    parentPath: <span class=\"hljs-type\">NodeKey</span>;\n  }\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">UNIQUE_WRAPPERS</span> = ['<span class=\"hljs-comment\">##==-open_tag-==##', '##==-close_tag-==##'];</span>\n  function getParentPath (parent: <span class=\"hljs-type\">TreeNodeOptionsWithParentPath</span> | null): <span class=\"hljs-type\">Array</span>&lt;<span class=\"hljs-type\">string</span> | number&gt; {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">result</span>: <span class=\"hljs-type\">Array</span>&lt;<span class=\"hljs-type\">string</span> | number&gt; = [];\n    <span class=\"hljs-keyword\">if</span> (parent) {\n      <span class=\"hljs-keyword\">const</span> base = parent.parentPath || [];\n      <span class=\"hljs-literal\">result</span> = base.concat(parent.nodeKey);\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">result</span>;\n  }\n  function recursion(path = '<span class=\"hljs-number\">0</span>', level = <span class=\"hljs-number\">3</span>, parent: <span class=\"hljs-type\">TreeNodeOptionsWithParentPath</span> | null = null): <span class=\"hljs-type\">TreeNodeOptionsWithParentPath</span>[] {\n    <span class=\"hljs-keyword\">const</span> list = [];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) {\n      <span class=\"hljs-keyword\">const</span> nodeKey = `${path}-${i}`;\n      <span class=\"hljs-keyword\">const</span> treeNode: <span class=\"hljs-type\">TreeNodeOptionsWithParentPath</span> = {\n        nodeKey,\n        name: nodeKey,\n        children: [],\n        hasChildren: <span class=\"hljs-literal\">true</span>,\n        parentPath: getParentPath(parent)\n      };\n\n      <span class=\"hljs-keyword\">if</span> (level &gt; <span class=\"hljs-number\">0</span>) {\n        treeNode.children = recursion(nodeKey, level - <span class=\"hljs-number\">1</span>, treeNode);\n      } <span class=\"hljs-keyword\">else</span> {\n        treeNode.hasChildren = <span class=\"hljs-literal\">false</span>;\n      }\n\n      list.push(treeNode);\n    }\n    <span class=\"hljs-keyword\">return</span> list;\n  }\n\n  <span class=\"hljs-keyword\">export</span> default defineComponent({\n    name: '<span class=\"hljs-type\">SearchNodeDemo</span>',\n    setup() {\n      <span class=\"hljs-keyword\">const</span> keywords = <span class=\"hljs-keyword\">ref</span>('');\n      <span class=\"hljs-keyword\">const</span> list = <span class=\"hljs-keyword\">ref</span>&lt;<span class=\"hljs-type\">TreeNodeOptionsWithParentPath</span>[]&gt;([]);\n      <span class=\"hljs-keyword\">const</span> expandKeys = <span class=\"hljs-keyword\">ref</span>&lt;<span class=\"hljs-type\">NodeKey</span>[]&gt;([]);\n      onMounted(() =&gt; {\n        list.value = recursion();\n        // console.log('list', list.value);\n      });\n      <span class=\"hljs-keyword\">const</span> formatSearchValue = (value: <span class=\"hljs-type\">string</span>) =&gt; {\n        <span class=\"hljs-keyword\">return</span> new <span class=\"hljs-type\">RegExp</span>(value.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$&amp;'), 'i');\n      }\n      <span class=\"hljs-keyword\">const</span> findMatchedNodes = (keywords: <span class=\"hljs-type\">string</span>): <span class=\"hljs-type\">TreeNodeOptionsWithParentPath</span>[] =&gt; {\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-literal\">result</span>: <span class=\"hljs-type\">TreeNodeOptionsWithParentPath</span>[] = [];\n        <span class=\"hljs-keyword\">const</span> recursion = (list: <span class=\"hljs-type\">TreeNodeOptionsWithParentPath</span>[], parent: <span class=\"hljs-type\">TreeNodeOptionsWithParentPath</span> | null = null) =&gt; {\n          <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> item <span class=\"hljs-keyword\">of</span> list) {\n            <span class=\"hljs-keyword\">const</span> matched = formatSearchValue(keywords).test(item.name);\n            <span class=\"hljs-keyword\">if</span> (matched) {\n              <span class=\"hljs-literal\">result</span>.push(item);\n            }\n            <span class=\"hljs-keyword\">if</span> (parent) {\n              // parent.expanded = matched;\n            }\n            <span class=\"hljs-keyword\">if</span> (item.children?.length) {\n              recursion(item.children <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">TreeNodeOptionsWithParentPath</span>[], item);\n            }\n          }\n        }\n        <span class=\"hljs-keyword\">if</span> (keywords) {\n          recursion(list.value);\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">result</span>;\n      }\n      <span class=\"hljs-keyword\">const</span> search = (event: <span class=\"hljs-type\">KeyboardEvent</span>) =&gt; {\n        keywords.value = (event.target <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">HTMLInputElement</span>).value;\n        <span class=\"hljs-keyword\">const</span> matchedNodes = findMatchedNodes(keywords.value);\n        <span class=\"hljs-keyword\">if</span> (matchedNodes.length) {\n          // 取出parentPath &gt; 拍扁 &gt; 去重\n          expandKeys.value = [...new <span class=\"hljs-type\">Set</span>(matchedNodes.map(item =&gt; item.parentPath).flat())];\n        }\n      }\n\n      <span class=\"hljs-keyword\">const</span> transform = (value: <span class=\"hljs-type\">string</span>, matchValue: <span class=\"hljs-type\">string</span>) =&gt; {\n        <span class=\"hljs-keyword\">if</span> (matchValue) {\n          <span class=\"hljs-keyword\">const</span> wrapValue = value.replace(formatSearchValue(matchValue), `${<span class=\"hljs-type\">UNIQUE_WRAPPERS</span>[<span class=\"hljs-number\">0</span>]}$&amp;${<span class=\"hljs-type\">UNIQUE_WRAPPERS</span>[<span class=\"hljs-number\">1</span>]}`);\n          <span class=\"hljs-keyword\">return</span> wrapValue\n            .replace(new <span class=\"hljs-type\">RegExp</span>(<span class=\"hljs-type\">UNIQUE_WRAPPERS</span>[<span class=\"hljs-number\">0</span>], 'g'), '&lt;span style=<span class=\"hljs-string\">\"color: #ff2041;\"</span>&gt;')\n            .replace(new <span class=\"hljs-type\">RegExp</span>(<span class=\"hljs-type\">UNIQUE_WRAPPERS</span>[<span class=\"hljs-number\">1</span>], 'g'), '&lt;/span&gt;');\n        }\n        <span class=\"hljs-keyword\">return</span> value;\n      }\n      <span class=\"hljs-keyword\">const</span> renderNode = (node: <span class=\"hljs-type\">TreeNodeOptions</span>) =&gt; {\n        <span class=\"hljs-keyword\">const</span> content = transform(node.name, keywords.value);\n        <span class=\"hljs-keyword\">return</span> &lt;<span class=\"hljs-keyword\">div</span> style=<span class=\"hljs-string\">\"padding: 0 4px;\"</span> innerHTML={ content } /&gt;;\n      }\n      <span class=\"hljs-keyword\">return</span> {\n        list,\n        search,\n        renderNode,\n        expandKeys\n      }\n    }\n  });\n&lt;/script&gt;\n</code></pre>"
  }
}
